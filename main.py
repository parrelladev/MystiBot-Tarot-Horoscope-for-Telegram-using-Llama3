import json
import random
import requests
from deep_translator import GoogleTranslator
import telebot
from APIs import BOT_TOKEN, LLM_API_URL

# Inicializando o bot com o token fornecido
bot = telebot.TeleBot(BOT_TOKEN)

# Definindo o teclado de resposta r√°pida
markup = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
item1 = telebot.types.KeyboardButton("Entender o funcionamento do bot")
item2 = telebot.types.KeyboardButton("Aprender sobre Tarot e hor√≥scopos")
item3 = telebot.types.KeyboardButton("Realizar leitura de Tarot")
item4 = telebot.types.KeyboardButton("Consultar meu hor√≥scopo")
markup.add(item1, item2, item3, item4)

# Definindo o teclado de resposta r√°pida para os signos do zod√≠aco
zodiac_markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
zodiac_signs = ["√Åries", "Touro", "G√™meos", "C√¢ncer", "Le√£o", "Virgem", "Libra", "Escorpi√£o", "Sagit√°rio", "Capric√≥rnio", "Aqu√°rio", "Peixes"]
for sign in zodiac_signs:
    zodiac_markup.add(telebot.types.KeyboardButton(sign))

# Fun√ß√£o para traduzir texto do ingl√™s para o portugu√™s
def translate_text(text):
    translation = GoogleTranslator(source="en", target="pt").translate(text)
    return translation

# Fun√ß√£o para gerar cartas aleat√≥rias do Tarot
def generate_cards():
    cards = [
        "O Louco", "O Mago", "A Sacerdotisa", "A Imperatriz", "O Imperador",
        "O Hierofante", "Os Amantes", "A Carruagem", "A Justi√ßa", "O Eremita",
        "A Roda da Fortuna", "A For√ßa", "O Enforcado", "A Morte", "A Temperan√ßa",
        "O Diabo", "A Torre", "A Estrela", "A Lua", "O Sol", "O Julgamento", "O Mundo"
    ]
    return random.sample(cards, 3)

# Fun√ß√£o para processar a sele√ß√£o do signo do usu√°rio
def process_zodiac_sign(message):
    # Obtendo o signo do usu√°rio
    user_sign = message.text
    # Gerando a resposta baseada no signo do usu√°rio
    response = generate_response_horoscope(user_sign)
    # Traduzindo a resposta para o portugu√™s
    translation = translate_text(response)
    # Enviando a resposta traduzida
    bot.send_message(message.chat.id, translation)
    # Enviando a mensagem de encerramento com o teclado de resposta r√°pida
    bot.send_message(message.chat.id, "Espero que tenha gostado da consulta! üòâ\n\nSelecione o que voc√™ deseja fazer agora:", reply_markup=markup)

# Fun√ß√£o para gerar uma resposta baseada na pergunta do usu√°rio e nas cartas do Tarot
def generate_response(user_question, cards_message):
    payload = {
        "role": "assistant",
        "model": "llama3",
        "prompt": "From now on you will take on the role of tarot interpreter. Your task is to help the user uncover the symbolic messages of the tarot and apply them to the specific situation the user will share. Please remember that the interpretations of the tarot cards are subjective and aim to promote reflection and self-knowledge. Be respectful and sensitive when dealing with personal issues. Don't respond with questions. Respond with direct and objective language, providing insights and short guidance, with a maximum of 600 characters, based on the cards indicated below:\n\n" + cards_message + "\n\n" + user_question,
    }

    try:
        response = requests.post(LLM_API_URL, json=payload)
        response_lines = response.text.strip().split('\n')
        concatenated_response = "".join([json.loads(line)["response"] for line in response_lines if "response" in json.loads(line)])
        return concatenated_response

    except Exception as e:
        return f"Error: {str(e)}"

# Fun√ß√£o para gerar uma resposta baseada no signo do usu√°rio
def generate_response_horoscope(user_sign):
    payload = {
        "role": "user",
        "model": "llama3",
        "prompt": user_sign + " It's my zodiac sign! What is my horoscope for the day? Don't respond with questions. Respond with direct and objective language, providing insights and short guidance, with a maximum of 200 characters",
    }

    try:
        response = requests.post(LLM_API_URL, json=payload)
        response_lines = response.text.strip().split('\n')
        concatenated_response = "".join([json.loads(line)["response"] for line in response_lines if "response" in json.loads(line)])
        return concatenated_response

    except Exception as e:
        return f"Error: {str(e)}"

# Fun√ß√£o para iniciar a leitura das cartas do Tarot
def interpret_tarot(message):
    sent = bot.reply_to(message, "üóØÔ∏è Por favor, digite a pergunta que voc√™ deseja fazer ao Tarot e espere eu fazer a leitura das cartas.")
    bot.register_next_step_handler(sent, process_question)

# Fun√ß√£o para iniciar a leitura do hor√≥scopo
def interpret_horoscope(message):
    bot.send_message(message.chat.id, "Por favor, escolha um signo do zod√≠aco abaixo:", reply_markup=zodiac_markup)
    bot.register_next_step_handler(message, process_question_horoscope)

# Fun√ß√£o para processar a pergunta do usu√°rio e gerar a resposta
def process_question(message):
    if message.text == "Realizar leitura de Tarot":
        interpret_tarot(message)
    elif message.text == "Entender o funcionamento do bot":
        bot.send_message(message.chat.id, "Eu sou um bot que oferece leituras de tar√¥ e hor√≥scopo. Utilizando a API Llama3, meu objetivo √© oferecer insights e orienta√ß√µes sobre quest√µes pessoais, profissionais e espirituais por meio de uma intera√ß√£o misticas e milenares.")
    elif message.text == "Aprender sobre Tarot e hor√≥scopos":
        bot.send_message(message.chat.id, "O Tarot √© um sistema de leitura de cartas que utiliza imagens e s√≠mbolos para fornecer insights e orienta√ß√µes sobre quest√µes pessoais, profissionais e espirituais.\n\nJ√° a leitura de hor√≥scopos √© uma forma de adivinha√ß√£o que utiliza a posi√ß√£o dos astros no momento do nascimento de uma pessoa para prever aspectos da sua personalidade e eventos da sua vida.")
    else:
        user_question = message.text
        drawn_cards = generate_cards()
        cards_message = "\n".join([f"{i+1}. {card}" for i, card in enumerate(drawn_cards)])
        response = (
            f"üßô‚Äç‚ôÄÔ∏è Acabei de tirar do baralho algumas cartas aleat√≥rias para voc√™. Elas s√£o:\n\n"
            f"{cards_message}\n\n"
        )
        bot.send_message(message.chat.id, response)
        sent_message = bot.send_message(message.chat.id, "üîÆ Estou fazendo a leitura. Me d√™ uns segundinhos...")
        message_id = sent_message.message_id
        response = generate_response(user_question, cards_message)
        translation = translate_text(response)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_id, text=translation)
        bot.send_message(message.chat.id, "Espero que tenha gostado da consulta! üòâ\n\nSelecione o que voc√™ deseja fazer agora:", reply_markup=markup)

# Fun√ß√£o para processar a pergunta do usu√°rio e gerar a resposta do hor√≥scopo
def process_question_horoscope(message):
    user_sign = message.text
    if user_sign in zodiac_signs: # Verifica se o texto da mensagem √© um signo v√°lido
        sent_message = bot.send_message(message.chat.id, "üîÆ Estou consultando as estrelas. Me d√™ uns segundinhos...")
        message_id = sent_message.message_id
        response = generate_response_horoscope(user_sign)
        translation = translate_text(response)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_id, text=translation)
        bot.send_message(message.chat.id, "Espero que tenha gostado da consulta! üòâ\n\nSelecione o que voc√™ deseja fazer agora:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "Por favor, escolha um signo do zod√≠aco v√°lido.", reply_markup=zodiac_markup)

# Manipuladores de Mensagens
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üßô‚Äç‚ôÄÔ∏è Ol√°! Eu sou o consultor MystiBot.\n\nSelecione uma das op√ß√µes abaixo para come√ßar:", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == "Realizar leitura de Tarot":
        interpret_tarot(message)
    elif message.text == "Entender o funcionamento do bot":
        bot.send_message(message.chat.id, "Eu sou um bot que oferece leituras de tar√¥ e hor√≥scopo. Utilizando a API Llama3, meu objetivo √© oferecer insights e orienta√ß√µes sobre quest√µes pessoais, profissionais e espirituais por meio de uma intera√ß√£o misticas e milenares.")
    elif message.text == "Aprender sobre Tarot e hor√≥scopos":
        bot.send_message(message.chat.id, "O Tarot √© um sistema de leitura de cartas que utiliza imagens e s√≠mbolos para fornecer insights e orienta√ß√µes sobre quest√µes pessoais, profissionais e espirituais.\n\nJ√° a leitura de hor√≥scopos √© uma forma de adivinha√ß√£o que utiliza a posi√ß√£o dos astros no momento do nascimento de uma pessoa para prever aspectos da sua personalidade e eventos da sua vida.")
    elif message.text == "Consultar meu hor√≥scopo":
        interpret_horoscope(message)
    else:
        bot.send_message(message.chat.id, "ü´† Desculpe, n√£o consegui entender sua escolha. Por favor, selecione uma das op√ß√µes no menu:", reply_markup=markup)

# Iniciando o bot
bot.polling()
